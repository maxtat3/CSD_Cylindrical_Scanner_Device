
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000470  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006a  0080006a  0000050e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000051f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a5  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fb  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000345  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	59 c0       	rjmp	.+178    	; 0xb6 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e7       	ldi	r30, 0x70	; 112
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 37       	cpi	r26, 0x77	; 119
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	be d1       	rcall	.+892    	; 0x3d6 <main>
  5a:	08 c2       	rjmp	.+1040   	; 0x46c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:

	}
}

// Прием символа по usart`у в буфер
ISR(USART_RXC_vect){ 
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
   usartRxBuf = UDR;  
  6a:	8c b1       	in	r24, 0x0c	; 12
  6c:	80 93 6d 00 	sts	0x006D, r24
} 
  70:	8f 91       	pop	r24
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <__vector_14>:

// Обработка прерывания от ацп
ISR(ADC_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	// считываем младший и старший байты результата АЦ-преобразования и образуем из них 10-разрядный результат
	lowByte = ADCL;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 93 74 00 	sts	0x0074, r24
	adcResult = (ADCH<<8)|lowByte;
  92:	25 b1       	in	r18, 0x05	; 5
  94:	80 91 74 00 	lds	r24, 0x0074
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	92 2b       	or	r25, r18
  9c:	90 93 76 00 	sts	0x0076, r25
  a0:	80 93 75 00 	sts	0x0075, r24

	// запускаем новое АЦ-преобразование
	ADCSRA |= (1<<ADSC);
  a4:	36 9a       	sbi	0x06, 6	; 6
}
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	2f 91       	pop	r18
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_1>:

// Обработчик кнопка для запуска/остановки процееса измерений
ISR(INT0_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	// start measuring
	if (btnStateFlag == false){
  c6:	80 91 6e 00 	lds	r24, 0x006E
  ca:	81 11       	cpse	r24, r1
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <__vector_1+0x20>
		btnStateFlag = true;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 6e 00 	sts	0x006E, r24
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <__vector_1+0x2e>
		pcCommand = DO_START_SM;
	// stop measuring
	} else if (btnStateFlag == true){
  d6:	80 91 6e 00 	lds	r24, 0x006E
  da:	88 23       	and	r24, r24
  dc:	29 f0       	breq	.+10     	; 0xe8 <__vector_1+0x32>
		btnStateFlag = false;
  de:	10 92 6e 00 	sts	0x006E, r1
		pcCommand = DO_STOP_SM;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 6a 00 	sts	0x006A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	98 e0       	ldi	r25, 0x08	; 8
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <__vector_1+0x38>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__vector_1+0x42>
  f8:	00 00       	nop
	}

	_delay_ms(200); // антидребизг
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <initUSART>:

void initUSART(){
	//UBRR=95 @ 9600 бод при 14,7456 MHz (U2X = 0)
	//UBRR=51 @ 9600 бод при 8 MHz (U2X = 0)
	// примерно 60 выб/с для 1 канала ???!!!
	UBRRH = 0;
 10a:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51; 
 10c:	83 e3       	ldi	r24, 0x33	; 51
 10e:	89 b9       	out	0x09, r24	; 9
	
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме, разр приема, разр передачи.
 110:	88 e9       	ldi	r24, 0x98	; 152
 112:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  //размер слова 8 разрядов
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	80 bd       	out	0x20, r24	; 32
 118:	08 95       	ret

0000011a <initADC>:
}


// настройка АЦП
void initADC(void){
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // предделитель на 128
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	87 60       	ori	r24, 0x07	; 7
 11e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADIE);                        // разрешаем прерывание от ацп
 120:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1<<ADEN);                        // разрешаем работу АЦП
 122:	37 9a       	sbi	0x06, 7	; 6

	ADMUX |= (1<<REFS0)|(1<<REFS1);             // работа от внутр. ИОН 2,56 В
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 6c       	ori	r24, 0xC0	; 192
 128:	87 b9       	out	0x07, r24	; 7
	ADMUX|=(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	87 b9       	out	0x07, r24	; 7
 12e:	08 95       	ret

00000130 <initExtInt0>:
}

// настройка прерывания от внешнего источник (кнопки)
void initExtInt0(){
	// срабатывание по низкому уровню на выводе INT0
	ClearBit(MCUCR, ISC00);
 130:	85 b7       	in	r24, 0x35	; 53
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	85 bf       	out	0x35, r24	; 53
	ClearBit(MCUCR, ISC01);
 136:	85 b7       	in	r24, 0x35	; 53
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	85 bf       	out	0x35, r24	; 53
	// резрещаем внешние прерывания
	SetBit(GICR, INT0);
 13c:	8b b7       	in	r24, 0x3b	; 59
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	8b bf       	out	0x3b, r24	; 59
 142:	08 95       	ret

00000144 <turnOnTC1>:
}


// Запуск ТС1 
void turnOnTC1(){
	isBlockTC1 = true;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 6f 00 	sts	0x006F, r24
	// разрешаем прерывания при переполнении
	SetBit(TIMSK, TOIE1);
 14a:	89 b7       	in	r24, 0x39	; 57
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	89 bf       	out	0x39, r24	; 57

	// устанавливаем делитель частоты 64
	SetBit(TCCR1B, CS10);
 150:	8e b5       	in	r24, 0x2e	; 46
 152:	81 60       	ori	r24, 0x01	; 1
 154:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B, CS11);
 156:	8e b5       	in	r24, 0x2e	; 46
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B, CS12);
 15c:	8e b5       	in	r24, 0x2e	; 46
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	8e bd       	out	0x2e, r24	; 46
	
	// устанавливаем нормальный режим
	// в этом режиме OCR1A нельзя изменить, OCR1A = 0xFFFF
	ClearBit(TCCR1A, WGM10);
 162:	8f b5       	in	r24, 0x2f	; 47
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	8f bd       	out	0x2f, r24	; 47
	ClearBit(TCCR1A, WGM11);
 168:	8f b5       	in	r24, 0x2f	; 47
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	8f bd       	out	0x2f, r24	; 47
	ClearBit(TCCR1B, WGM12);
 16e:	8e b5       	in	r24, 0x2e	; 46
 170:	87 7f       	andi	r24, 0xF7	; 247
 172:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B, WGM13);
 174:	8e b5       	in	r24, 0x2e	; 46
 176:	8f 7e       	andi	r24, 0xEF	; 239
 178:	8e bd       	out	0x2e, r24	; 46

	// подстраиваим частоту срабатываения
	TCNT1 = TCNT1_START_VAL;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	9a ef       	ldi	r25, 0xFA	; 250
 17e:	9d bd       	out	0x2d, r25	; 45
 180:	8c bd       	out	0x2c, r24	; 44
 182:	08 95       	ret

00000184 <sendCharToUSART>:
	sei();
}

// отправка символа по usart`у
void sendCharToUSART(unsigned char sym){
	while(!(UCSRA & (1<<UDRE)));
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <sendCharToUSART>
	UDR = sym;  
 188:	8c b9       	out	0x0c, r24	; 12
 18a:	08 95       	ret

0000018c <getCharOfUSART>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 18c:	f8 94       	cli

// чтение буфера usart
unsigned char getCharOfUSART(void){
	unsigned char tmp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		tmp = usartRxBuf;
 18e:	80 91 6d 00 	lds	r24, 0x006D
		usartRxBuf = 0;
 192:	10 92 6d 00 	sts	0x006D, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 196:	78 94       	sei
	}
	return tmp;  
}
 198:	08 95       	ret

0000019a <stopSM>:
	return true;
}

// остановка ШД - снятия напряжения с управляющих выводов
void stopSM(){
	ClearBit(SM_PORT, SM_WIRE_1);
 19a:	94 98       	cbi	0x12, 4	; 18
	ClearBit(SM_PORT, SM_WIRE_2);
 19c:	95 98       	cbi	0x12, 5	; 18
	ClearBit(SM_PORT, SM_WIRE_3);
 19e:	96 98       	cbi	0x12, 6	; 18
	ClearBit(SM_PORT, SM_WIRE_4);
 1a0:	97 98       	cbi	0x12, 7	; 18
 1a2:	08 95       	ret

000001a4 <initIO>:


/* инициализация портов в/в */
void initIO(void){
	/* Настприваем на ВЫХОД порты к которым подклчен двигатель */
	SetBit(SM_DDR, SM_WIRE_1);
 1a4:	8c 9a       	sbi	0x11, 4	; 17
	SetBit(SM_DDR, SM_WIRE_2);
 1a6:	8d 9a       	sbi	0x11, 5	; 17
	SetBit(SM_DDR, SM_WIRE_3);
 1a8:	8e 9a       	sbi	0x11, 6	; 17
	SetBit(SM_DDR, SM_WIRE_4);
 1aa:	8f 9a       	sbi	0x11, 7	; 17

	stopSM();
 1ac:	f6 df       	rcall	.-20     	; 0x19a <stopSM>

	/* Настриваем на ВХОД порт для подключения опто-прерывателя */
	ClearBit(OPTO_SENSOR_DDR, OPTO_SENSOR);
 1ae:	b8 98       	cbi	0x17, 0	; 23
	
	/* Настриваем на ВЫХОД порт для подключения state led  */
	SetBit(STATE_LED_DDR, STATE_LED);
 1b0:	b9 9a       	sbi	0x17, 1	; 23
 1b2:	08 95       	ret

000001b4 <turnOffTC1>:
	TCNT1 = TCNT1_START_VAL;
}

//Отключаем ТС1
void turnOffTC1(){
	cli();
 1b4:	f8 94       	cli
	// выключение таймера
	ClearBit(TCCR1B, CS10);
 1b6:	8e b5       	in	r24, 0x2e	; 46
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B, CS11);
 1bc:	8e b5       	in	r24, 0x2e	; 46
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B, CS12);
 1c2:	8e b5       	in	r24, 0x2e	; 46
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	8e bd       	out	0x2e, r24	; 46

	stopSM();
 1c8:	e8 df       	rcall	.-48     	; 0x19a <stopSM>

	pcCommand = DO_STOP_SM;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 6a 00 	sts	0x006A, r24
	isBlockTC1 = false;
 1d0:	10 92 6f 00 	sts	0x006F, r1
	sei();
 1d4:	78 94       	sei
 1d6:	08 95       	ret

000001d8 <__vector_8>:
	_delay_ms(200); // антидребизг
}



ISR(TIMER1_OVF_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	static signed char stepCount = 0;
	// счетчик шагов ШД в процессе измерения
	static int smProgressCount = 0;

	// прямой ход ШД - выполнение измерений
	if(smProgressCount < SM_FULL_MSR_STEPS && !isDisableForward){
 1fa:	80 91 72 00 	lds	r24, 0x0072
 1fe:	90 91 73 00 	lds	r25, 0x0073
 202:	20 91 71 00 	lds	r18, 0x0071
 206:	8a 30       	cpi	r24, 0x0A	; 10
 208:	94 41       	sbci	r25, 0x14	; 20
 20a:	bc f5       	brge	.+110    	; 0x27a <__vector_8+0xa2>
 20c:	21 11       	cpse	r18, r1
 20e:	35 c0       	rjmp	.+106    	; 0x27a <__vector_8+0xa2>
		if (pcCommand == DO_START_SM){
 210:	80 91 6a 00 	lds	r24, 0x006A
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	31 f5       	brne	.+76     	; 0x264 <__vector_8+0x8c>

			SM_PORT = smTableNormalStep[stepCount];
 218:	e0 91 70 00 	lds	r30, 0x0070
 21c:	ff 27       	eor	r31, r31
 21e:	e7 fd       	sbrc	r30, 7
 220:	f0 95       	com	r31
 222:	ea 59       	subi	r30, 0x9A	; 154
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	82 bb       	out	0x12, r24	; 18
			stepCount ++;
 22a:	80 91 70 00 	lds	r24, 0x0070
 22e:	8f 5f       	subi	r24, 0xFF	; 255
			if (stepCount > 3) stepCount = 0;
 230:	84 30       	cpi	r24, 0x04	; 4
 232:	1c f4       	brge	.+6      	; 0x23a <__vector_8+0x62>
	// прямой ход ШД - выполнение измерений
	if(smProgressCount < SM_FULL_MSR_STEPS && !isDisableForward){
		if (pcCommand == DO_START_SM){

			SM_PORT = smTableNormalStep[stepCount];
			stepCount ++;
 234:	80 93 70 00 	sts	0x0070, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <__vector_8+0x66>
			if (stepCount > 3) stepCount = 0;
 23a:	10 92 70 00 	sts	0x0070, r1

			sendCharToUSART((unsigned char)(adcResult/4));
 23e:	80 91 75 00 	lds	r24, 0x0075
 242:	90 91 76 00 	lds	r25, 0x0076
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9a df       	rcall	.-204    	; 0x184 <sendCharToUSART>

			smProgressCount ++;
 250:	80 91 72 00 	lds	r24, 0x0072
 254:	90 91 73 00 	lds	r25, 0x0073
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	90 93 73 00 	sts	0x0073, r25
 25e:	80 93 72 00 	sts	0x0072, r24
 262:	1c c0       	rjmp	.+56     	; 0x29c <__vector_8+0xc4>

		}else if (pcCommand == DO_STOP_SM){
 264:	80 91 6a 00 	lds	r24, 0x006A
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	c1 f4       	brne	.+48     	; 0x29c <__vector_8+0xc4>
			isDisableForward = true;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 71 00 	sts	0x0071, r24
			stepCount = 3;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	80 93 70 00 	sts	0x0070, r24
 278:	11 c0       	rjmp	.+34     	; 0x29c <__vector_8+0xc4>
		}
	}else if(!isDisableForward){
 27a:	21 11       	cpse	r18, r1
 27c:	0f c0       	rjmp	.+30     	; 0x29c <__vector_8+0xc4>
		isDisableForward = true;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 71 00 	sts	0x0071, r24
		stepCount = 3;
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	80 93 70 00 	sts	0x0070, r24
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	9f e7       	ldi	r25, 0x7F	; 127
 28e:	2d e0       	ldi	r18, 0x0D	; 13
 290:	81 50       	subi	r24, 0x01	; 1
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <__vector_8+0xb8>
 298:	00 c0       	rjmp	.+0      	; 0x29a <__vector_8+0xc2>
 29a:	00 00       	nop
		_delay_ms(300);
	}

	// обратный ход ШД - возвращение в исходное положение
	if (smProgressCount > 0 && isDisableForward){
 29c:	80 91 72 00 	lds	r24, 0x0072
 2a0:	90 91 73 00 	lds	r25, 0x0073
 2a4:	18 16       	cp	r1, r24
 2a6:	19 06       	cpc	r1, r25
 2a8:	ec f4       	brge	.+58     	; 0x2e4 <__vector_8+0x10c>
 2aa:	80 91 71 00 	lds	r24, 0x0071
 2ae:	88 23       	and	r24, r24
 2b0:	c9 f0       	breq	.+50     	; 0x2e4 <__vector_8+0x10c>
		SM_PORT = smTableNormalStep[stepCount];
 2b2:	e0 91 70 00 	lds	r30, 0x0070
 2b6:	ff 27       	eor	r31, r31
 2b8:	e7 fd       	sbrc	r30, 7
 2ba:	f0 95       	com	r31
 2bc:	ea 59       	subi	r30, 0x9A	; 154
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
 2c2:	82 bb       	out	0x12, r24	; 18
		stepCount --;
 2c4:	80 91 70 00 	lds	r24, 0x0070
 2c8:	81 50       	subi	r24, 0x01	; 1
		if (stepCount < 0) stepCount = 3;
 2ca:	87 fd       	sbrc	r24, 7
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 70 00 	sts	0x0070, r24

		smProgressCount --;
 2d2:	80 91 72 00 	lds	r24, 0x0072
 2d6:	90 91 73 00 	lds	r25, 0x0073
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	90 93 73 00 	sts	0x0073, r25
 2e0:	80 93 72 00 	sts	0x0072, r24
	}

	// останока ШД
	if (smProgressCount == 0 && isDisableForward){
 2e4:	80 91 72 00 	lds	r24, 0x0072
 2e8:	90 91 73 00 	lds	r25, 0x0073
 2ec:	89 2b       	or	r24, r25
 2ee:	69 f4       	brne	.+26     	; 0x30a <__vector_8+0x132>
 2f0:	80 91 71 00 	lds	r24, 0x0071
 2f4:	88 23       	and	r24, r24
 2f6:	49 f0       	breq	.+18     	; 0x30a <__vector_8+0x132>
		isDisableForward = false;
 2f8:	10 92 71 00 	sts	0x0071, r1
		stepCount = 0;
 2fc:	10 92 70 00 	sts	0x0070, r1
		smProgressCount = 0;
 300:	10 92 73 00 	sts	0x0073, r1
 304:	10 92 72 00 	sts	0x0072, r1
		turnOffTC1();
 308:	55 df       	rcall	.-342    	; 0x1b4 <turnOffTC1>
	}


	TCNT1 = TCNT1_START_VAL;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	9a ef       	ldi	r25, 0xFA	; 250
 30e:	9d bd       	out	0x2d, r25	; 45
 310:	8c bd       	out	0x2c, r24	; 44
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <checkSMInBeginPos>:


// Проверка расположения (парковки) ШД в исходном (начальном) положении 
// Обратный ход ШД до закрытия окна опто-прерывателя
bool checkSMInBeginPos(){
	cli();
 334:	f8 94       	cli
	while (IsClearBit(OPTO_SENSOR_PIN, OPTO_SENSOR)){
		SM_PORT = smTableNormalStep[3];
 336:	80 e1       	ldi	r24, 0x10	; 16
		_delay_ms(SM_DELAY_STEP_MS);
	
		SM_PORT = smTableNormalStep[2];
 338:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(SM_DELAY_STEP_MS);
		
		SM_PORT = smTableNormalStep[1];
 33a:	20 e4       	ldi	r18, 0x40	; 64
		_delay_ms(SM_DELAY_STEP_MS);
		
		SM_PORT = smTableNormalStep[0];
 33c:	30 e8       	ldi	r19, 0x80	; 128

// Проверка расположения (парковки) ШД в исходном (начальном) положении 
// Обратный ход ШД до закрытия окна опто-прерывателя
bool checkSMInBeginPos(){
	cli();
	while (IsClearBit(OPTO_SENSOR_PIN, OPTO_SENSOR)){
 33e:	b0 99       	sbic	0x16, 0	; 22
 340:	1d c0       	rjmp	.+58     	; 0x37c <checkSMInBeginPos+0x48>
		SM_PORT = smTableNormalStep[3];
 342:	82 bb       	out	0x12, r24	; 18
 344:	ef ef       	ldi	r30, 0xFF	; 255
 346:	ff e8       	ldi	r31, 0x8F	; 143
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <checkSMInBeginPos+0x14>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <checkSMInBeginPos+0x1a>
 34e:	00 00       	nop
		_delay_ms(SM_DELAY_STEP_MS);
	
		SM_PORT = smTableNormalStep[2];
 350:	92 bb       	out	0x12, r25	; 18
 352:	ef ef       	ldi	r30, 0xFF	; 255
 354:	ff e8       	ldi	r31, 0x8F	; 143
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <checkSMInBeginPos+0x22>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <checkSMInBeginPos+0x28>
 35c:	00 00       	nop
		_delay_ms(SM_DELAY_STEP_MS);
		
		SM_PORT = smTableNormalStep[1];
 35e:	22 bb       	out	0x12, r18	; 18
 360:	ef ef       	ldi	r30, 0xFF	; 255
 362:	ff e8       	ldi	r31, 0x8F	; 143
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <checkSMInBeginPos+0x30>
 368:	00 c0       	rjmp	.+0      	; 0x36a <checkSMInBeginPos+0x36>
 36a:	00 00       	nop
		_delay_ms(SM_DELAY_STEP_MS);
		
		SM_PORT = smTableNormalStep[0];
 36c:	32 bb       	out	0x12, r19	; 18
 36e:	ef ef       	ldi	r30, 0xFF	; 255
 370:	ff e8       	ldi	r31, 0x8F	; 143
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <checkSMInBeginPos+0x3e>
 376:	00 c0       	rjmp	.+0      	; 0x378 <checkSMInBeginPos+0x44>
 378:	00 00       	nop
 37a:	e1 cf       	rjmp	.-62     	; 0x33e <checkSMInBeginPos+0xa>
		_delay_ms(SM_DELAY_STEP_MS);
	}
	stopSM();
 37c:	0e df       	rcall	.-484    	; 0x19a <stopSM>
	sei();
 37e:	78 94       	sei
	return true;
}
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret

00000384 <blinkLed1r>:
}



void blinkLed1r(){
	SetBit(STATE_LED_PORT, STATE_LED);
 384:	c1 9a       	sbi	0x18, 1	; 24
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	8f e7       	ldi	r24, 0x7F	; 127
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <blinkLed1r+0x8>
 394:	00 c0       	rjmp	.+0      	; 0x396 <blinkLed1r+0x12>
 396:	00 00       	nop
	_delay_ms(100);
	ClearBit(STATE_LED_PORT, STATE_LED);
 398:	c1 98       	cbi	0x18, 1	; 24
 39a:	08 95       	ret

0000039c <blinkLed2r>:
}

void blinkLed2r(){
	SetBit(STATE_LED_PORT, STATE_LED);
 39c:	c1 9a       	sbi	0x18, 1	; 24
 39e:	29 e9       	ldi	r18, 0x99	; 153
 3a0:	89 e5       	ldi	r24, 0x59	; 89
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <blinkLed2r+0x8>
 3ac:	00 00       	nop
	_delay_ms(30);
	ClearBit(STATE_LED_PORT, STATE_LED);
 3ae:	c1 98       	cbi	0x18, 1	; 24
 3b0:	29 e9       	ldi	r18, 0x99	; 153
 3b2:	89 e5       	ldi	r24, 0x59	; 89
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <blinkLed2r+0x1a>
 3be:	00 00       	nop
	_delay_ms(30);
	SetBit(STATE_LED_PORT, STATE_LED);
 3c0:	c1 9a       	sbi	0x18, 1	; 24
 3c2:	29 e9       	ldi	r18, 0x99	; 153
 3c4:	89 e5       	ldi	r24, 0x59	; 89
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <blinkLed2r+0x2c>
 3d0:	00 00       	nop
	_delay_ms(30);
	ClearBit(STATE_LED_PORT, STATE_LED);
 3d2:	c1 98       	cbi	0x18, 1	; 24
 3d4:	08 95       	ret

000003d6 <main>:
void blinkLed2r();



int main(void){
	cli();
 3d6:	f8 94       	cli
	initIO();
 3d8:	e5 de       	rcall	.-566    	; 0x1a4 <initIO>
	initUSART();
 3da:	97 de       	rcall	.-722    	; 0x10a <initUSART>
	initADC();
 3dc:	9e de       	rcall	.-708    	; 0x11a <initADC>
	initExtInt0();
 3de:	a8 de       	rcall	.-688    	; 0x130 <initExtInt0>
	sei();
 3e0:	78 94       	sei

	checkSMInBeginPos();
 3e2:	a8 df       	rcall	.-176    	; 0x334 <checkSMInBeginPos>

	ADCSRA |= (1<<ADSC); // запускаем первое АЦП преобразование
 3e4:	36 9a       	sbi	0x06, 6	; 6
				commCount = 0;
			}
		} else if (sym == pcToMcuStopMeasureComm[commCount]){
			commCount ++;
			if (commCount == sizeof(pcToMcuStopMeasureComm)){
				pcCommand = DO_STOP_SM;
 3e6:	c2 e0       	ldi	r28, 0x02	; 2
		//	Блоки проверки соответствия команд от ПК
		//=====================================
		if (sym == pcToMcuStartMeasureComm[commCount]){
			commCount ++;
			if (commCount == sizeof(pcToMcuStartMeasureComm)){
				pcCommand = DO_START_SM;
 3e8:	d1 e0       	ldi	r29, 0x01	; 1
	ADCSRA |= (1<<ADSC); // запускаем первое АЦП преобразование

	unsigned char sym;

	while(1){
		sym = getCharOfUSART();
 3ea:	d0 de       	rcall	.-608    	; 0x18c <getCharOfUSART>
		
		//=====================================
		//	Блоки проверки соответствия команд от ПК
		//=====================================
		if (sym == pcToMcuStartMeasureComm[commCount]){
 3ec:	20 91 6b 00 	lds	r18, 0x006B
 3f0:	30 91 6c 00 	lds	r19, 0x006C
 3f4:	f9 01       	movw	r30, r18
 3f6:	ed 59       	subi	r30, 0x9D	; 157
 3f8:	ff 4f       	sbci	r31, 0xFF	; 255
 3fa:	90 81       	ld	r25, Z
 3fc:	89 13       	cpse	r24, r25
 3fe:	0c c0       	rjmp	.+24     	; 0x418 <main+0x42>
			commCount ++;
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	30 93 6c 00 	sts	0x006C, r19
 408:	20 93 6b 00 	sts	0x006B, r18
			if (commCount == sizeof(pcToMcuStartMeasureComm)){
 40c:	23 30       	cpi	r18, 0x03	; 3
 40e:	31 05       	cpc	r19, r1
 410:	c1 f4       	brne	.+48     	; 0x442 <main+0x6c>
				pcCommand = DO_START_SM;
 412:	d0 93 6a 00 	sts	0x006A, r29
 416:	11 c0       	rjmp	.+34     	; 0x43a <main+0x64>
				commCount = 0;
			}
		} else if (sym == pcToMcuStopMeasureComm[commCount]){
 418:	f9 01       	movw	r30, r18
 41a:	e0 5a       	subi	r30, 0xA0	; 160
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	90 81       	ld	r25, Z
 420:	89 13       	cpse	r24, r25
 422:	0f c0       	rjmp	.+30     	; 0x442 <main+0x6c>
			commCount ++;
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	30 93 6c 00 	sts	0x006C, r19
 42c:	20 93 6b 00 	sts	0x006B, r18
			if (commCount == sizeof(pcToMcuStopMeasureComm)){
 430:	23 30       	cpi	r18, 0x03	; 3
 432:	31 05       	cpc	r19, r1
 434:	31 f4       	brne	.+12     	; 0x442 <main+0x6c>
				pcCommand = DO_STOP_SM;
 436:	c0 93 6a 00 	sts	0x006A, r28
				commCount = 0;
 43a:	10 92 6c 00 	sts	0x006C, r1
 43e:	10 92 6b 00 	sts	0x006B, r1

		//=========================================
		//	Блоки выполнения методов в зависимости
		//	от полученной команды от ПК
		//=========================================
		switch(pcCommand){
 442:	80 91 6a 00 	lds	r24, 0x006A
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	29 f0       	breq	.+10     	; 0x454 <main+0x7e>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	71 f6       	brne	.-100    	; 0x3ea <main+0x14>
					sei();
				}
				break;

			case DO_STOP_SM:
				btnStateFlag = false;
 44e:	10 92 6e 00 	sts	0x006E, r1
				break;
 452:	cb cf       	rjmp	.-106    	; 0x3ea <main+0x14>
		switch(pcCommand){
			case STDBY:
				break;

			case DO_START_SM:
				if (isBlockTC1 == false){
 454:	80 91 6f 00 	lds	r24, 0x006F
 458:	81 11       	cpse	r24, r1
 45a:	c7 cf       	rjmp	.-114    	; 0x3ea <main+0x14>
					sendCharToUSART('o');
 45c:	8f e6       	ldi	r24, 0x6F	; 111
 45e:	92 de       	rcall	.-732    	; 0x184 <sendCharToUSART>
					sendCharToUSART('p');
 460:	80 e7       	ldi	r24, 0x70	; 112
 462:	90 de       	rcall	.-736    	; 0x184 <sendCharToUSART>
					cli();
 464:	f8 94       	cli
					turnOnTC1();
 466:	6e de       	rcall	.-804    	; 0x144 <turnOnTC1>
					sei();
 468:	78 94       	sei
 46a:	bf cf       	rjmp	.-130    	; 0x3ea <main+0x14>

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
